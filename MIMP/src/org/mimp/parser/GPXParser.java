/*
 * File:           GPXParser.java
 * Date:           18 February 2010  10:03
 *
 * @author  hellhand
 * @version generated by NetBeans XML module
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.mimp.parser;

import java.io.IOException;
import java.util.Stack;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.*;

/**
 * 
 * @author hellhand
 */
@SuppressWarnings("unchecked")
public class GPXParser implements DocumentHandler {
    private GPXHandler handler;
    @SuppressWarnings("rawtypes")
    private Stack context;
    private StringBuffer buffer;
    private EntityResolver resolver;

    /**
     * 
     * Creates a parser instance.
     * 
     * @param handler
     *            handler interface implementation (never <code>null</code>
     * @param resolver
     *            SAX entity resolver implementation or <code>null</code>. It is
     *            recommended that it could be able to resolve at least the DTD.
     */
    @SuppressWarnings("rawtypes")
    public GPXParser(final GPXHandler handler, final EntityResolver resolver) {
        this.handler = handler;
        this.resolver = resolver;
        buffer = new StringBuffer(111);
        context = new java.util.Stack();
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void setDocumentLocator(Locator locator) {
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void startDocument() throws SAXException {
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void endDocument() throws SAXException {
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void startElement(java.lang.String name,
            org.xml.sax.AttributeList attrs) throws org.xml.sax.SAXException {
        dispatch(true);
        context.push(new Object[] { name,
                new org.xml.sax.helpers.AttributeListImpl(attrs) });
        if ("wptinfos".equals(name)) {
            handler.start_wptinfos(attrs);
        }
        else if ("gpxmedia".equals(name)) {
            handler.start_gpxmedia(attrs);
        }
        else if ("extensions".equals(name)) {
            handler.start_extensions(attrs);
        }
        else if ("publisher".equals(name)) {
            handler.start_publisher(attrs);
        }
        else if ("author".equals(name)) {
            handler.start_author(attrs);
        }
        else if ("trkseg".equals(name)) {
            handler.start_trkseg(attrs);
        }
        else if ("gpxinfos".equals(name)) {
            handler.start_gpxinfos(attrs);
        }
        else if ("gpx".equals(name)) {
            handler.start_gpx(attrs);
        }
        else if ("metadata".equals(name)) {
            handler.start_metadata(attrs);
        }
        else if ("trkpt".equals(name)) {
            handler.start_trkpt(attrs);
        }
        else if ("trkinfos".equals(name)) {
            handler.start_trkinfos(attrs);
        }
        else if ("trk".equals(name)) {
            handler.start_trk(attrs);
        }
        else if ("rte".equals(name)) {
            handler.start_rte(attrs);
        }
        else if ("copyright".equals(name)) {
            handler.start_copyright(attrs);
        }
        else if ("rteinfos".equals(name)) {
            handler.start_rteinfos(attrs);
        }
        else if ("bounds".equals(name)) {
            handler.handle_bounds(attrs);
        }
        else if ("rtept".equals(name)) {
            handler.start_rtept(attrs);
        }
        else if ("wpt".equals(name)) {
            handler.start_wpt(attrs);
        }
        else if ("source".equals(name)) {
            handler.start_source(attrs);
        }
        else if ("email".equals(name)) {
            handler.handle_email(attrs);
        }
        else if ("medias".equals(name)) {
            handler.start_medias(attrs);
        }
        else if ("media".equals(name)) {
            handler.start_media(attrs);
        }
        else if ("content".equals(name)) {
            handler.start_content(attrs);
        }
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void endElement(java.lang.String name)
            throws org.xml.sax.SAXException {
        dispatch(false);
        context.pop();
        if ("wptinfos".equals(name)) {
            handler.end_wptinfos();
        }
        else if ("gpxmedia".equals(name)) {
            handler.end_gpxmedia();
        }
        else if ("extensions".equals(name)) {
            handler.end_extensions();
        }
        else if ("publisher".equals(name)) {
            handler.end_publisher();
        }
        else if ("author".equals(name)) {
            handler.end_author();
        }
        else if ("trkseg".equals(name)) {
            handler.end_trkseg();
        }
        else if ("gpxinfos".equals(name)) {
            handler.end_gpxinfos();
        }
        else if ("gpx".equals(name)) {
            handler.end_gpx();
        }
        else if ("metadata".equals(name)) {
            handler.end_metadata();
        }
        else if ("trkpt".equals(name)) {
            handler.end_trkpt();
        }
        else if ("trkinfos".equals(name)) {
            handler.end_trkinfos();
        }
        else if ("trk".equals(name)) {
            handler.end_trk();
        }
        else if ("rte".equals(name)) {
            handler.end_rte();
        }
        else if ("copyright".equals(name)) {
            handler.end_copyright();
        }
        else if ("rteinfos".equals(name)) {
            handler.end_rteinfos();
        }
        else if ("rtept".equals(name)) {
            handler.end_rtept();
        }
        else if ("wpt".equals(name)) {
            handler.end_wpt();
        }
        else if ("source".equals(name)) {
            handler.end_source();
        }
        else if ("medias".equals(name)) {
            handler.end_medias();
        }
        else if ("media".equals(name)) {
            handler.end_media();
        }
        else if ("content".equals(name)) {
            handler.end_content();
        }
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void characters(char[] chars, int start, int len)
            throws SAXException {
        buffer.append(chars, start, len);
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void ignorableWhitespace(char[] chars, int start, int len)
            throws SAXException {
    }

    /**
     * 
     * This SAX interface method is implemented by the parser.
     */
    public final void processingInstruction(String target, String data)
            throws SAXException {
    }

    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) {
            return;
        }
        Object[] ctx = (Object[]) context.peek();
        String here = (String) ctx[0];
        org.xml.sax.AttributeList attrs = (org.xml.sax.AttributeList) ctx[1];
        if ("elemin".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_elemin(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("desc".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_desc(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("sym".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_sym(buffer.length() == 0 ? null : buffer.toString(),
                    attrs);
        }
        else if ("type".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_type(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("distance".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_distance(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("time".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_time(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("title".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_title(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("name".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_name(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("activitytype".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_activitytype(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("year".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_year(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("realdistance".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_realdistance(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("ele".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_ele(buffer.length() == 0 ? null : buffer.toString(),
                    attrs);
        }
        else if ("thl".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_thl(buffer.length() == 0 ? null : buffer.toString(),
                    attrs);
        }
        else if ("thg".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_thg(buffer.length() == 0 ? null : buffer.toString(),
                    attrs);
        }
        else if ("url".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_url(buffer.length() == 0 ? null : buffer.toString(),
                    attrs);
        }
        else if ("duration".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_duration(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("bearing".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_bearing(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("radius".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_radius(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("characteristic".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_characteristic(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("maxspeed".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_maxspeed(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("elemax".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_elemax(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else if ("content".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException(
                        "Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_content(
                    buffer.length() == 0 ? null : buffer.toString(), attrs);
        }
        else {
        }
        buffer.delete(0, buffer.length());
    }

    /**
     * 
     * The recognizer entry method taking an InputSource.
     * 
     * @param input
     *            InputSource to be parsed.
     * @throws java.io.IOException
     *             on I/O error
     * @throws org.xml.sax.SAXException
     *             propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException
     *             a parser satisfying the requested configuration cannot be
     *             created
     * @throws javax.xml.parsers.FactoryConfigurationRrror
     *             if the implementation cannot be instantiated
     */
    public void parse(final org.xml.sax.InputSource input) throws SAXException,
            ParserConfigurationException, IOException {
        parse(input, this);
    }

    /**
     * 
     * The recognizer entry method taking a URL.
     * 
     * @param url
     *            URL Source to be parsed.
     * @throws java.io.IOException
     *             on I/O error
     * @throws org.xml.sax.SAXException
     *             propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException
     *             a parser satisfying the requested configuration cannot be
     *             created
     * @throws javax.xml.parsers.FactoryConfigurationRrror
     *             if the implementation cannot be instantiated
     */
    public void parse(final java.net.URL url) throws SAXException,
            ParserConfigurationException, IOException {
        parse(new org.xml.sax.InputSource(url.toExternalForm()), this);
    }

    /**
     * 
     * The recognizer entry method taking an Inputsource.
     * 
     * @param input
     *            InputSource to be parsed.
     * @throws java.io.IOException
     *             on I/O error
     * @throws org.xml.sax.SAXException
     *             propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException
     *             a parser satisfying the requested configuration cannot be
     *             created
     * @throws javax.xml.parsers.FactoryConfigurationRrror
     *             if the implementation cannot be instantiated
     */
    public static void parse(final org.xml.sax.InputSource input,
            final GPXHandler handler) throws SAXException,
            ParserConfigurationException, IOException {
        parse(input, new GPXParser(handler, null));
    }

    /**
     * 
     * The recognizer entry method taking a URL.
     * 
     * @param url
     *            URL source to be parsed.
     * @throws java.io.IOException
     *             on I/O error
     * @throws org.xml.sax.SAXException
     *             propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException
     *             a parser satisfying the requested configuration cannot be
     *             created
     * @throws javax.xml.parsers.FactoryConfigurationRrror
     *             if the implementation cannot be instantiated
     */
    public static void parse(final java.net.URL url, final GPXHandler handler)
            throws SAXException, ParserConfigurationException, IOException {
        parse(new org.xml.sax.InputSource(url.toExternalForm()), handler);
    }

    private static void parse(final org.xml.sax.InputSource input,
            final GPXParser recognizer) throws SAXException,
            ParserConfigurationException, IOException {
        javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory
                .newInstance();
        // factory.setValidating(true);
        // the code was generated according DTD
        factory.setNamespaceAware(false);
        // the code was generated according DTD
        Parser parser = factory.newSAXParser().getParser();
        parser.setDocumentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null) {
            parser.setEntityResolver(recognizer.resolver);
        }
        parser.parse(input);
    }

    /**
     * 
     * Creates default error handler used by this parser.
     * 
     * @return org.xml.sax.ErrorHandler implementation
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {

            public void error(SAXParseException ex) throws SAXException {
                if (context.isEmpty()) {
                    System.err.println("Missing DOCTYPE.");
                }
                throw ex;
            }

            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }

            public void warning(SAXParseException ex) throws SAXException {
            }
        };
    }

}
